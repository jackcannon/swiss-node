import * as swissnode from '../';

swissnode.ask;
swissnode.ask.text;
swissnode.ask.autotext;
swissnode.ask.number;
swissnode.ask.boolean;
swissnode.ask.booleanAlt;
swissnode.ask.select;
swissnode.ask.multiselect;
swissnode.ask.crud;
swissnode.ask.validate;
swissnode.ask.imitate;
swissnode.ask.prefill;
swissnode.ask.loading;
swissnode.ask.pause;
swissnode.ask.countdown;
swissnode.ask.wizard;
swissnode.ask.date;
swissnode.ask.time;
swissnode.ask.datetime;
swissnode.ask.dateRange;
swissnode.ask.fileExplorer;
swissnode.ask.multiFileExplorer;
swissnode.ask.saveFileExplorer;
swissnode.ask.table;
swissnode.ask.table.select;
swissnode.ask.table.multiselect;
swissnode.ask.trim;
swissnode.ask.separator;
swissnode.ask.section;
swissnode.ask.utils;
swissnode.ask.utils.itemsToPromptObjects;

swissnode.out;
swissnode.out.getWidth;
swissnode.out.pad;
swissnode.out.center;
swissnode.out.left;
swissnode.out.right;
swissnode.out.justify;
swissnode.out.leftLines;
swissnode.out.centerLines;
swissnode.out.rightLines;
swissnode.out.justifyLines;
swissnode.out.align;
swissnode.out.split;
swissnode.out.wrap;
swissnode.out.moveUp;
swissnode.out.loading;
swissnode.out.limitToLength;
swissnode.out.limitToLengthStart;
swissnode.out.truncate;
swissnode.out.truncateStart;
swissnode.out.concatLineGroups;
swissnode.out.getResponsiveValue;
type outResponsiveOption = swissnode.out.ResponsiveOption<number>;
swissnode.out.getBreadcrumb;
swissnode.getBreadcrumb;
type outBreadcrumb = swissnode.out.Breadcrumb;
type Breadcrumb = swissnode.Breadcrumb;
swissnode.out.getLineCounter;
swissnode.getLineCounter;
type outLineCounter = swissnode.out.LineCounter;
type LineCounter = swissnode.LineCounter;
swissnode.out.utils;
swissnode.out.utils.getTerminalWidth;
swissnode.out.utils.getLines;
swissnode.out.utils.getNumLines;
swissnode.out.utils.getLinesWidth;
swissnode.out.utils.getLogLines;
swissnode.out.utils.getNumLogLines;
swissnode.out.utils.getLogLinesWidth;
swissnode.out.utils.joinLines;
swissnode.out.utils.hasColor;
swissnode.out.utils.stripAnsi;
swissnode.out.utils.getEmojiRegex;

swissnode.colr;
swissnode.colr.light;
swissnode.colr.dark;
swissnode.colr.lightBg;
swissnode.colr.darkBg;
swissnode.colr.black;
swissnode.colr.darkBlack;
swissnode.colr.lightBlack;
swissnode.colr.red;
swissnode.colr.darkRed;
swissnode.colr.lightRed;
swissnode.colr.green;
swissnode.colr.darkGreen;
swissnode.colr.lightGreen;
swissnode.colr.yellow;
swissnode.colr.darkYellow;
swissnode.colr.lightYellow;
swissnode.colr.blue;
swissnode.colr.darkBlue;
swissnode.colr.lightBlue;
swissnode.colr.magenta;
swissnode.colr.darkMagenta;
swissnode.colr.lightMagenta;
swissnode.colr.cyan;
swissnode.colr.darkCyan;
swissnode.colr.lightCyan;
swissnode.colr.white;
swissnode.colr.darkWhite;
swissnode.colr.lightWhite;
swissnode.colr.blackBg;
swissnode.colr.darkBlackBg;
swissnode.colr.lightBlackBg;
swissnode.colr.redBg;
swissnode.colr.darkRedBg;
swissnode.colr.lightRedBg;
swissnode.colr.greenBg;
swissnode.colr.darkGreenBg;
swissnode.colr.lightGreenBg;
swissnode.colr.yellowBg;
swissnode.colr.darkYellowBg;
swissnode.colr.lightYellowBg;
swissnode.colr.blueBg;
swissnode.colr.darkBlueBg;
swissnode.colr.lightBlueBg;
swissnode.colr.magentaBg;
swissnode.colr.darkMagentaBg;
swissnode.colr.lightMagentaBg;
swissnode.colr.cyanBg;
swissnode.colr.darkCyanBg;
swissnode.colr.lightCyanBg;
swissnode.colr.whiteBg;
swissnode.colr.darkWhiteBg;
swissnode.colr.lightWhiteBg;
swissnode.colr.grey;
swissnode.colr.gray;
swissnode.colr.greyBg;
swissnode.colr.grayBg;
swissnode.colr.grey0;
swissnode.colr.gray0;
swissnode.colr.grey1;
swissnode.colr.gray1;
swissnode.colr.grey2;
swissnode.colr.gray2;
swissnode.colr.grey3;
swissnode.colr.gray3;
swissnode.colr.grey4;
swissnode.colr.gray4;
swissnode.colr.grey5;
swissnode.colr.gray5;
swissnode.colr.primary;
swissnode.colr.secondary;
swissnode.colr.success;
swissnode.colr.danger;
swissnode.colr.warning;
swissnode.colr.info;
swissnode.colr.primaryBg;
swissnode.colr.secondaryBg;
swissnode.colr.successBg;
swissnode.colr.dangerBg;
swissnode.colr.warningBg;
swissnode.colr.infoBg;
swissnode.colr.reset;
swissnode.colr.bold;
swissnode.colr.dim;
swissnode.colr.italic;
swissnode.colr.overline;
swissnode.colr.underline;
swissnode.colr.inverse;
swissnode.colr.hidden;
swissnode.colr.strikethrough;
swissnode.colr.$;
swissnode.colr.template;
swissnode.colr.debug;
swissnode.colr.sets;
swissnode.colr.sets.red;
swissnode.colr.sets.red.text;
swissnode.colr.sets.red.bg;
swissnode.colr.sets.green;
swissnode.colr.sets.green.text;
swissnode.colr.sets.green.bg;
swissnode.colr.sets.yellow;
swissnode.colr.sets.yellow.text;
swissnode.colr.sets.yellow.bg;
swissnode.colr.sets.blue;
swissnode.colr.sets.blue.text;
swissnode.colr.sets.blue.bg;
swissnode.colr.sets.magenta;
swissnode.colr.sets.magenta.text;
swissnode.colr.sets.magenta.bg;
swissnode.colr.sets.cyan;
swissnode.colr.sets.cyan.text;
swissnode.colr.sets.cyan.bg;
swissnode.colr.sets.black;
swissnode.colr.sets.black.text;
swissnode.colr.sets.black.bg;
swissnode.colr.sets.white;
swissnode.colr.sets.white.text;
swissnode.colr.sets.white.bg;
swissnode.colr.sets.grey;
swissnode.colr.sets.grey.text;
swissnode.colr.sets.grey.bg;
swissnode.colr.sets.gray;
swissnode.colr.sets.gray.text;
swissnode.colr.sets.gray.bg;
swissnode.colr.sets.primary;
swissnode.colr.sets.primary.text;
swissnode.colr.sets.primary.bg;
swissnode.colr.sets.secondary;
swissnode.colr.sets.secondary.text;
swissnode.colr.sets.secondary.bg;
swissnode.colr.sets.success;
swissnode.colr.sets.success.text;
swissnode.colr.sets.success.bg;
swissnode.colr.sets.danger;
swissnode.colr.sets.danger.text;
swissnode.colr.sets.danger.bg;
swissnode.colr.sets.warning;
swissnode.colr.sets.warning.text;
swissnode.colr.sets.warning.bg;
swissnode.colr.sets.info;
swissnode.colr.sets.info.text;
swissnode.colr.sets.info.bg;

type ColrFn = swissnode.ColrFn;
type WrapSet = swissnode.WrapSet;
type ColrSet = swissnode.ColrSet;

(({}) as WrapSet).text;
(({}) as WrapSet).bg;
(({}) as ColrSet).text;
(({}) as ColrSet).bg;

swissnode.table;
swissnode.table.print;
swissnode.table.printObjects;
swissnode.table.markdown;
swissnode.table.getLines;
swissnode.table.utils;
swissnode.table.utils.objectsToTable;
swissnode.table.utils.transpose;
swissnode.table.utils.concatRows;
swissnode.table.utils.getFormat;

swissnode.log;
swissnode.createLogger;
type LogOptions = swissnode.LogOptions;
type LogConfig = swissnode.LogConfig;

swissnode.LogTools;
swissnode.LogTools.getLogStr;
swissnode.getLogStr;
swissnode.LogTools.processLogContents;
swissnode.processLogContents;
swissnode.LogTools.getLog;
swissnode.getLog;

swissnode.PathTools;
swissnode.PathTools.explodePath;
swissnode.explodePath;
type PathToolsExplodedPath = swissnode.PathTools.ExplodedPath;
type ExplodedPath = swissnode.ExplodedPath;
swissnode.PathTools.removeTrailSlash;
swissnode.PathTools.trailSlash;
swissnode.PathTools.removeDoubleSlashes;

swissnode.progressBarTools;
swissnode.progressBarTools.getColouredProgressBarOpts;

swissnode.nextTick;
swissnode.waiters.nextTick;

// --------------------------- PROGRESS LINE ---------------------------

swissnode.getKeyListener;
type KeyListener = swissnode.KeyListener;
